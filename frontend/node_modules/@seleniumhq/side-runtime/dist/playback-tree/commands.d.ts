import { CommandShape } from '@seleniumhq/side-model';
export declare const ControlFlowCommandNames: {
    readonly do: "do";
    readonly else: "else";
    readonly elseIf: "elseIf";
    readonly end: "end";
    readonly forEach: "forEach";
    readonly if: "if";
    readonly repeatIf: "repeatIf";
    readonly times: "times";
    readonly try: "try";
    readonly while: "while";
};
declare function isBlockOpen(command: CommandShape): boolean;
declare function isConditional(command: CommandShape): boolean;
declare function isControlFlow(command: CommandShape): boolean;
declare function isDo(command: CommandShape): boolean;
declare function isElse(command: CommandShape): boolean;
declare function isElseOrElseIf(command: CommandShape): boolean;
declare function isEnd(command: CommandShape): boolean;
declare function isIf(command: CommandShape): boolean;
declare function isIfBlock(command: CommandShape): boolean;
declare function isLoop(command: CommandShape): boolean;
declare function isTerminal(command: CommandShape): boolean;
declare function isTimes(command: CommandShape): boolean;
declare function isTry(command: CommandShape): boolean;
declare function isForEach(command: CommandShape): boolean;
export declare const ControlFlowCommandChecks: {
    isIfBlock: typeof isIfBlock;
    isConditional: typeof isConditional;
    isDo: typeof isDo;
    isElse: typeof isElse;
    isElseOrElseIf: typeof isElseOrElseIf;
    isEnd: typeof isEnd;
    isIf: typeof isIf;
    isLoop: typeof isLoop;
    isBlockOpen: typeof isBlockOpen;
    isTerminal: typeof isTerminal;
    isControlFlow: typeof isControlFlow;
    isTimes: typeof isTimes;
    isForEach: typeof isForEach;
    isTry: typeof isTry;
};
export {};
//# sourceMappingURL=commands.d.ts.map