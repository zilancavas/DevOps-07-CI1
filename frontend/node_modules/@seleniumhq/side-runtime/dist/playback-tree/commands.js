"use strict";
// Licensed to the Software Freedom Conservancy (SFC) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The SFC licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(exports, "__esModule", { value: true });
exports.ControlFlowCommandChecks = exports.ControlFlowCommandNames = void 0;
exports.ControlFlowCommandNames = {
    do: 'do',
    else: 'else',
    elseIf: 'elseIf',
    end: 'end',
    forEach: 'forEach',
    if: 'if',
    repeatIf: 'repeatIf',
    times: 'times',
    try: 'try',
    while: 'while',
};
function commandNamesEqual(command, target) {
    if (command) {
        return command.command === target;
    }
    else {
        return false;
    }
}
function isCommandEnabled(command) {
    return command && !command.skip;
}
function isBlockOpen(command) {
    return (isCommandEnabled(command) &&
        (isIf(command) || isLoop(command) || isTry(command)));
}
function isConditional(command) {
    if (!isCommandEnabled(command))
        return false;
    switch (command.command) {
        case exports.ControlFlowCommandNames.elseIf:
        case exports.ControlFlowCommandNames.if:
        case exports.ControlFlowCommandNames.repeatIf:
        case exports.ControlFlowCommandNames.times:
        case exports.ControlFlowCommandNames.while:
            return true;
        default:
            return false;
    }
}
function isControlFlow(command) {
    if (!isCommandEnabled(command))
        return false;
    switch (command.command) {
        case exports.ControlFlowCommandNames.if:
        case exports.ControlFlowCommandNames.elseIf:
        case exports.ControlFlowCommandNames.else:
        case exports.ControlFlowCommandNames.end:
        case exports.ControlFlowCommandNames.do:
        case exports.ControlFlowCommandNames.repeatIf:
        case exports.ControlFlowCommandNames.times:
        case exports.ControlFlowCommandNames.try:
        case exports.ControlFlowCommandNames.while:
            return true;
        default:
            return false;
    }
}
function isDo(command) {
    return (isCommandEnabled(command) &&
        commandNamesEqual(command, exports.ControlFlowCommandNames.do));
}
function isElse(command) {
    return (isCommandEnabled(command) &&
        commandNamesEqual(command, exports.ControlFlowCommandNames.else));
}
function isElseIf(command) {
    return (isCommandEnabled(command) &&
        commandNamesEqual(command, exports.ControlFlowCommandNames.elseIf));
}
function isElseOrElseIf(command) {
    return isCommandEnabled(command) && (isElseIf(command) || isElse(command));
}
function isEnd(command) {
    return (isCommandEnabled(command) &&
        commandNamesEqual(command, exports.ControlFlowCommandNames.end));
}
function isIf(command) {
    return (isCommandEnabled(command) &&
        commandNamesEqual(command, exports.ControlFlowCommandNames.if));
}
function isIfBlock(command) {
    return isCommandEnabled(command) && (isIf(command) || isElseOrElseIf(command));
}
function isLoop(command) {
    if (!isCommandEnabled(command))
        return false;
    return (commandNamesEqual(command, exports.ControlFlowCommandNames.while) ||
        commandNamesEqual(command, exports.ControlFlowCommandNames.times) ||
        commandNamesEqual(command, exports.ControlFlowCommandNames.repeatIf) ||
        commandNamesEqual(command, exports.ControlFlowCommandNames.forEach));
}
function isTerminal(command) {
    return (isCommandEnabled(command) &&
        (isElse(command) || isDo(command) || isEnd(command)));
}
function isTimes(command) {
    return (isCommandEnabled(command) &&
        commandNamesEqual(command, exports.ControlFlowCommandNames.times));
}
function isTry(command) {
    return (isCommandEnabled(command) &&
        commandNamesEqual(command, exports.ControlFlowCommandNames.try));
}
function isForEach(command) {
    return (isCommandEnabled(command) &&
        commandNamesEqual(command, exports.ControlFlowCommandNames.forEach));
}
exports.ControlFlowCommandChecks = {
    isIfBlock,
    isConditional,
    isDo,
    isElse,
    isElseOrElseIf,
    isEnd,
    isIf,
    isLoop,
    isBlockOpen,
    isTerminal,
    isControlFlow,
    isTimes,
    isForEach,
    isTry,
};
//# sourceMappingURL=commands.js.map