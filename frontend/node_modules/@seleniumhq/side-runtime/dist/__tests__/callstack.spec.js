"use strict";
// Licensed to the Software Freedom Conservancy (SFC) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The SFC licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const callstack_1 = __importDefault(require("../callstack"));
describe('Call stack', () => {
    it('should be able to call and unwind', () => {
        const callee = {
            id: '2',
            name: 'open',
            commands: [
                {
                    id: 'a',
                    command: 'open',
                    target: '',
                    value: '',
                },
            ],
        };
        const proc = {
            callee,
            caller: {
                position: undefined,
                tree: undefined,
            },
        };
        const cs = new callstack_1.default();
        expect(cs.length).toBe(0);
        cs.call(proc);
        expect(cs.length).toBe(1);
        expect(cs.unwind()).toBe(proc);
        expect(cs.length).toBe(0);
    });
    it('should throw if trying to unwind an empty stack', () => {
        const cs = new callstack_1.default();
        expect(() => cs.unwind()).toThrow();
    });
    it('should access the current executing procedure', () => {
        const cs = new callstack_1.default();
        const proc = {};
        cs.call(proc);
        expect(cs.top()).toBe(proc);
        expect(cs.length).toBe(1);
    });
});
//# sourceMappingURL=callstack.spec.js.map