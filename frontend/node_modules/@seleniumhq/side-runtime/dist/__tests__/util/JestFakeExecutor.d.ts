/// <reference types="jest" />
import { CommandShape } from '@seleniumhq/side-model';
import Variables from '../../variables';
export default class FakeExecutor {
    customCommands: {
        [key: string]: () => void;
    };
    implicitWait: number;
    initialized: boolean;
    killed: boolean;
    variables: Variables;
    constructor(..._args: any[]);
    init: jest.Mock<void, [{
        variables: Variables;
    }], any>;
    executeHook: jest.Mock<any, any, any>;
    name: jest.Mock<string, [command: string], any>;
    cancel: jest.Mock<any, any, any>;
    cleanup: jest.Mock<any, any, any>;
    kill: jest.Mock<Promise<void>, [], any>;
    beforeCommand: jest.Mock<Promise<void>, [_commandObject: CommandShape], any>;
    afterCommand: jest.Mock<void, [_commandObject: CommandShape], any>;
    doAssert: jest.Mock<any, any, any>;
    doAssertText: jest.Mock<any, any, any>;
    doPause: jest.Mock<Promise<unknown>, [timeout?: any], any>;
    doOpen: jest.Mock<any, any, any>;
    doVerify: jest.Mock<any, any, any>;
    doVerifyText: jest.Mock<any, any, any>;
    doFake: jest.Mock<any, any, any>;
    evaluateConditional: jest.Mock<any, any, any>;
}
//# sourceMappingURL=JestFakeExecutor.d.ts.map