import { WebDriver } from 'selenium-webdriver';
import { WebDriverExecutor } from '.';
import { StoreWindowHandleHookInput, WindowAppearedHookInput, WindowSwitchedHookInput } from './types';
export interface RecorderSyncronizerInput {
    sessionId: string;
    executeAsyncScript: WebDriverExecutor['doExecuteAsyncScript'];
    switchToWindow: (handle: string) => Promise<void>;
    getWindowHandle: WebDriver['getWindowHandle'];
    logger: Console;
}
export interface WindowFnInput {
    windowHandle: string;
    windowHandleName: string;
}
export default function createRecorderSyncronizer({ sessionId, executeAsyncScript, switchToWindow, getWindowHandle, logger, }: RecorderSyncronizerInput): {
    hooks: {
        onStoreWindowHandle: ({ windowHandle, windowHandleName, }: StoreWindowHandleHookInput) => Promise<void>;
        onWindowAppeared: ({ windowHandle, windowHandleName, }: WindowAppearedHookInput) => Promise<void>;
        onWindowSwitched: ({ windowHandle }: WindowSwitchedHookInput) => Promise<void>;
    };
    syncAllPendingWindows: () => Promise<void>;
};
//# sourceMappingURL=recording-syncronizer.d.ts.map