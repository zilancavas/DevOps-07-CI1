"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getCustomCommands = exports.loadPlugins = exports.correctPluginPaths = void 0;
const path_1 = __importDefault(require("path"));
const side_model_1 = require("@seleniumhq/side-model");
const correctPluginPaths = (projectPath, plugins) => {
    const projectDir = projectPath?.split(path_1.default.sep).slice(0, -1).join(path_1.default.sep);
    return plugins
        .filter((pluginPath) => {
        if (typeof pluginPath !== 'string') {
            console.warn('Skipping legacy style plugin ', pluginPath);
            return false;
        }
        return true;
    })
        .map((pluginPath) => {
        return pluginPath.startsWith('.')
            ? path_1.default.join(projectDir, pluginPath)
            : pluginPath;
    });
};
exports.correctPluginPaths = correctPluginPaths;
const loadPlugins = async (pluginPaths, importer) => Promise.all(pluginPaths.map(async (pluginPath) => {
    console.debug('Loading plugin from path...', pluginPath);
    let pluginFile = importer
        ? await importer(pluginPath)
        : await Promise.resolve(`${pluginPath}`).then(s => __importStar(require(s)));
    const plugin = pluginFile.default
        ? pluginFile.default
        : pluginFile;
    if (plugin) {
        Object.entries(plugin.commands || {}).forEach(([key, command]) => {
            // @ts-expect-error oh fuck off
            side_model_1.Commands[key] = command;
        });
    }
    return plugin;
}));
exports.loadPlugins = loadPlugins;
const getCustomCommands = (plugins) => plugins.reduce((commands, plugin) => ({
    ...commands,
    ...plugin.commands,
}), {});
exports.getCustomCommands = getCustomCommands;
//# sourceMappingURL=plugins.js.map